{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","buildQuery","SiriDBDatasourceQueryCtrl","$scope","$injector","uiSegmentSrv","scope","target","aggr","group","raw","diff","diffps","query","list","props","listProps","servers","users","series","pools","shards","groups","datasource","metricFindQuery","then","transformToSegments","panelCtrl","refresh","prop","idx","splice","push","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\nimport {buildQuery} from \"./tools.js\";\n\nexport class SiriDBDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector, uiSegmentSrv)  {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.target.target = this.target.target || '';\n    this.target.aggr = this.target.aggr || 'mean';\n    this.target.group = this.target.group || '';\n    this.target.raw = this.target.raw || null;\n    this.target.diff = this.target.diff || false;\n    this.target.diffps = this.target.diffps || false;\n    this.target.query = this.target.query || 'select';\n    this.target.list = this.target.list || 'servers';\n    this.target.props = this.target.props || [];\n\n    this.listProps = {\n      servers: [\n        'active_handles',\n        'address',\n        'buffer_path',\n        'buffer_size',\n        'dbpath',\n        'ip_support',\n        'libuv',\n        'log_level',\n        'max_open_files',\n        'mem_usage',\n        'name',\n        'online',\n        'open_files',\n        'pool',\n        'port',\n        'received_points',\n        'reindex_progress',\n        'startup_time',\n        'status',\n        'sync_progress',\n        'uptime',\n        'uuid',\n        'version'],\n      users: [\n        'access',\n        'name'],\n      series: [\n        'end',\n        'length',\n        'name',\n        'pool',\n        'start',\n        'type'],\n      pools: [\n        'pool',\n        'series',\n        'servers'],\n      shards: [\n        'end',\n        'pool',\n        'server',\n        'sid',\n        'size',\n        'start',\n        'status',\n        'type'],\n      groups: [\n        'expression',\n        'name',\n        'series']\n    }\n  }\n\n  getOptions() {\n    return this.datasource.metricFindQuery(this.target)\n      .then(this.uiSegmentSrv.transformToSegments(false));\n      // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n  }\n\n  toggleEditorMode() {\n    this.target.raw = (this.target.raw === null) ? buildQuery(this.target) : null;\n    if (this.target.target) {\n      this.panelCtrl.refresh();\n    }\n  }\n\n  removeProp(prop, idx) {\n    this.target.props.splice(idx, 1);\n    this.panelCtrl.refresh();\n  }\n\n  appendProp() {\n    this.target.props.push(this.listProps[this.target.list][0]);\n    this.panelCtrl.refresh();\n  }\n\n  onChangeInternal() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n}\n\nSiriDBDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n\n"]}