{"version":3,"sources":["../src/datasource.js"],"names":["_","wrapTarget","buildQuery","SiriDBDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","timePrecision","jsonData","factor","name","q","headers","basicAuth","length","target","start","end","maxDataPoints","rawQuery","raw","query","replace","targets","filter","t","hide","pivot","tmp","aggr","group","diff","map","join","options","buildTargets","when","data","parseInt","range","from","valueOf","to","promises","forEach","buildSiriDBQuery","push","datasourceRequest","method","all","then","processQueryResult","bind","responses","seriesName","res","points","point","datapoints","response","status","tp","value","message","title","extractSeries","result","series","text","arr"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport {wrapTarget, buildQuery} from \"./tools.js\";\n\n\nexport class SiriDBDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.timePrecision = (instanceSettings.jsonData && instanceSettings.jsonData.timePrecision) ?\n      instanceSettings.jsonData.timePrecision : 'ms';\n    this.factor =\n        this.timePrecision === 's' ? 1000.0 :\n        this.timePrecision === 'ms' ? 1.0 :\n        this.timePrecision === 'us' ? 0.001 :\n        this.timePrecision === 'ns' ? 0.000001 :\n        -1  // error\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  buildSiriDBQuery(target, start, end, maxDataPoints) {\n    let rawQuery = (target.raw === null) ? buildQuery(target) : target.raw;\n    let query = rawQuery\n      .replace(/__START__/g, start)\n      .replace(/__END__/g, end)\n      .replace(/__MAX_DATA_POINTS__/g, maxDataPoints);\n    return query;\n  }\n\n  buildTargets(targets) {\n    targets = targets.filter(t => !t.hide);\n\n    if (!targets.length) {\n      return [];\n    }\n\n    let pivot = targets[0];\n    let tmp = targets.filter(t => t.aggr === pivot.aggr &&\n                                  t.group === pivot.group &&\n                                  t.diff === pivot.diff &&\n                                  t.raw === null);\n\n    if (tmp.length === targets.length) {\n      targets = [{\n        aggr: pivot.aggr,\n        group: pivot.group,\n        diff: pivot.diff,\n        raw: pivot.raw,\n        target: targets.map(t => wrapTarget(t.target)).join(',')\n      }];\n    }\n\n    return targets;\n  }\n\n  query(options) {\n    let targets = this.buildTargets(options.targets);\n\n    if (!targets.length) {\n      return this.q.when({data: []});\n    }\n\n    let start = parseInt(options.range.from.valueOf() / 1000) + 's';\n    let end = parseInt(options.range.to.valueOf() / 1000) + 's';\n    let promises = [];\n\n    targets.forEach(t => {\n      let query = this.buildSiriDBQuery(t, start, end, options.maxDataPoints);\n\n      promises.push(this.backendSrv.datasourceRequest({\n        url: this.url + '/query',\n        data: {query: query},\n        method: 'POST',\n        headers: this.headers\n      }));\n    })\n\n    return this.q.all(promises).then(this.processQueryResult.bind(this));\n  }\n\n  processQueryResult(responses) {\n    var data = [];\n\n    responses.forEach(res => {\n      for (let seriesName in res.data) {\n        let points = res.data[seriesName].map((point) => [point[1], point[0] * this.factor]);\n\n        data.push({\n          target: seriesName,\n          datapoints: points\n        });\n      }\n    });\n\n    return {data: data};\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/query',\n      method: 'POST',\n      data: {query: 'show time_precision'},\n      headers: this.headers\n    }).then(response => {\n\n      if (response.status === 200) {\n        let tp = response.data.data[0].value;\n        if (tp !== this.timePrecision) {\n          return { status: \"failed\", message: `Database seems to have a '${tp}' time precision`, title: \"Failed\" };\n        }\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  metricFindQuery(options) {\n    var target = typeof (options) === \"string\" ? options : options.target;\n    var query = { query: `list series /${target}.*/ limit 1` }\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/query',\n      data: query,\n      method: 'POST',\n      headers: this.headers\n    }).then(this.extractSeries);\n  }\n\n  extractSeries(result) {\n    return result.data.series.map(arr => { return {text: arr[0], value: arr[0]};});\n  }\n}\n"]}