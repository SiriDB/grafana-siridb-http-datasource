{"version":3,"sources":["../src/datasource.js"],"names":["_","wrapTarget","buildQuery","SiriDBDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","timePrecision","jsonData","factor","name","q","headers","basicAuth","length","target","start","end","maxDataPoints","rawQuery","raw","query","replace","targets","filter","t","hide","hasOwnProperty","pivot","tmp","aggr","group","diff","diffps","map","join","options","buildTargets","when","data","parseInt","range","from","valueOf","to","promises","forEach","buildSiriDBQuery","scopedVars","push","datasourceRequest","method","all","then","processQueryResult","bind","responses","res","columns","undefined","isString","processTableResult","seriesName","points","point","datapoints","table","text","col","rows","servers","pools","series","users","groups","shards","response","status","tp","value","message","title","extractSeries","result","arr"],"mappings":";;;;;;;;;;;;;;;AAAOA,O;;AACCC,gB,YAAAA,U;AAAYC,gB,YAAAA,U;;;;;;;;;;;;;;;;;;;;;kCAGPC,gB;AAEX,kCAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACzD,eAAKC,IAAL,GAAYJ,iBAAiBI,IAA7B;AACA,eAAKC,GAAL,GAAWL,iBAAiBK,GAA5B;AACA,eAAKC,aAAL,GAAsBN,iBAAiBO,QAAjB,IAA6BP,iBAAiBO,QAAjB,CAA0BD,aAAxD,GACnBN,iBAAiBO,QAAjB,CAA0BD,aADP,GACuB,IAD5C;AAEA,eAAKE,MAAL,GACI,KAAKF,aAAL,KAAuB,GAAvB,GAA6B,MAA7B,GACA,KAAKA,aAAL,KAAuB,IAAvB,GAA8B,GAA9B,GACA,KAAKA,aAAL,KAAuB,IAAvB,GAA8B,KAA9B,GACA,KAAKA,aAAL,KAAuB,IAAvB,GAA8B,QAA9B,GACA,CAAC,CALL,CALyD,CAUjD;AACR,eAAKG,IAAL,GAAYT,iBAAiBS,IAA7B;AACA,eAAKC,CAAL,GAAST,EAAT;AACA,eAAKC,UAAL,GAAkBA,UAAlB;AACA,eAAKC,WAAL,GAAmBA,WAAnB;AACA,eAAKQ,OAAL,GAAe,EAAC,gBAAgB,kBAAjB,EAAf;AACA,cAAI,OAAOX,iBAAiBY,SAAxB,KAAsC,QAAtC,IAAkDZ,iBAAiBY,SAAjB,CAA2BC,MAA3B,GAAoC,CAA1F,EAA6F;AAC3F,iBAAKF,OAAL,CAAa,eAAb,IAAgCX,iBAAiBY,SAAjD;AACD;AACF;;;;2CAEgBE,M,EAAQC,K,EAAOC,G,EAAKC,a,EAAe;;AAElD,gBAAIC,WAAYJ,OAAOK,GAAP,KAAe,IAAhB,GAAwBrB,WAAWgB,MAAX,CAAxB,GAA6CA,OAAOK,GAAnE;AACA,gBAAIC,QAAQF,SACTG,OADS,CACD,YADC,EACaN,KADb,EAETM,OAFS,CAED,UAFC,EAEWL,GAFX,EAGTK,OAHS,CAGD,sBAHC,EAGuBJ,aAHvB,CAAZ;AAIA,mBAAOG,KAAP;AACD;;;uCAEYE,O,EAAS;AACpBA,sBAAUA,QAAQC,MAAR,CAAe;AAAA,qBAAK,CAACC,EAAEC,IAAH,IAAWD,EAAEE,cAAF,CAAiB,KAAjB,CAAX,KAAuCF,EAAEJ,KAAF,KAAY,QAAZ,IAAwBI,EAAEL,GAAF,KAAU,IAAlC,IAA0CK,EAAEV,MAAnF,CAAL;AAAA,aAAf,CAAV;;AAEA,gBAAIQ,QAAQT,MAAR,GAAiB,CAArB,EAAwB;AACtB,kBAAIc,QAAQL,QAAQ,CAAR,CAAZ;AACA,kBAAIM,MAAMN,QAAQC,MAAR,CAAe;AAAA,uBAAKC,EAAEK,IAAF,KAAWF,MAAME,IAAjB,IACAL,EAAEM,KAAF,KAAYH,MAAMG,KADlB,IAEAN,EAAEO,IAAF,KAAWJ,MAAMI,IAFjB,IAGAP,EAAEQ,MAAF,KAAaL,MAAMK,MAHnB,IAIAR,EAAEL,GAAF,KAAU,IAJV,IAKAK,EAAEJ,KAAF,KAAY,QALjB;AAAA,eAAf,CAAV;;AAOA,kBAAIQ,IAAIf,MAAJ,KAAeS,QAAQT,MAA3B,EAAmC;AACjCS,0BAAU,CAAC;AACTF,yBAAOO,MAAMP,KADJ;AAETS,wBAAMF,MAAME,IAFH;AAGTC,yBAAOH,MAAMG,KAHJ;AAITC,wBAAMJ,MAAMI,IAJH;AAKTC,0BAAQL,MAAMK,MALL;AAMTb,uBAAKQ,MAAMR,GANF;AAOTL,0BAAQQ,QAAQW,GAAR,CAAY;AAAA,2BAAKpC,WAAW2B,EAAEV,MAAb,CAAL;AAAA,mBAAZ,EAAuCoB,IAAvC,CAA4C,GAA5C;AAPC,iBAAD,CAAV;AASD;AACF;;AAED,mBAAOZ,OAAP;AACD;;;gCAEKa,O,EAAS;AAAA;;AACb,gBAAIb,UAAU,KAAKc,YAAL,CAAkBD,QAAQb,OAA1B,CAAd;;AAEA,gBAAI,CAACA,QAAQT,MAAb,EAAqB;AACnB,qBAAO,KAAKH,CAAL,CAAO2B,IAAP,CAAY,EAACC,MAAM,EAAP,EAAZ,CAAP;AACD;;AAED,gBAAIvB,QAAQwB,SAASJ,QAAQK,KAAR,CAAcC,IAAd,CAAmBC,OAAnB,KAA+B,IAAxC,IAAgD,GAA5D;AACA,gBAAI1B,MAAMuB,SAASJ,QAAQK,KAAR,CAAcG,EAAd,CAAiBD,OAAjB,KAA6B,IAAtC,IAA8C,GAAxD;AACA,gBAAIE,WAAW,EAAf;;AAEAtB,oBAAQuB,OAAR,CAAgB,aAAK;AACnB,kBAAIzB,QAAQ,MAAK0B,gBAAL,CAAsBtB,CAAtB,EAAyBT,KAAzB,EAAgCC,GAAhC,EAAqCmB,QAAQlB,aAA7C,CAAZ;AACAG,sBAAQ,MAAKjB,WAAL,CAAiBkB,OAAjB,CAAyBD,KAAzB,EAAgCe,QAAQY,UAAxC,EAAoD,OAApD,CAAR;;AAEAH,uBAASI,IAAT,CAAc,MAAK9C,UAAL,CAAgB+C,iBAAhB,CAAkC;AAC9C5C,qBAAK,MAAKA,GADoC;AAE9CiC,sBAAM,EAAClB,OAAOA,KAAR,EAFwC;AAG9C8B,wBAAQ,MAHsC;AAI9CvC,yBAAS,MAAKA;AAJgC,eAAlC,CAAd;AAMD,aAVD;;AAYA,mBAAO,KAAKD,CAAL,CAAOyC,GAAP,CAAWP,QAAX,EAAqBQ,IAArB,CAA0B,KAAKC,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAA1B,CAAP;AACD;;;6CAEkBC,S,EAAW;AAAA;;AAC5B,gBAAIjB,OAAO,EAAX;;AAEAiB,sBAAUV,OAAV,CAAkB,eAAO;AACvB,kBAAIW,IAAIlB,IAAJ,IACAkB,IAAIlB,IAAJ,CAASmB,OAAT,KAAqBC,SADrB,IAEAF,IAAIlB,IAAJ,CAASmB,OAAT,CAAiB5C,MAFjB,IAGAjB,EAAE+D,QAAF,CAAWH,IAAIlB,IAAJ,CAASmB,OAAT,CAAiB,CAAjB,CAAX,CAHJ,EAGqC;AACjCnB,qBAAKU,IAAL,CAAU,OAAKY,kBAAL,CAAwBJ,IAAIlB,IAA5B,CAAV;AACH,eALD,MAKO,KAAK,IAAIuB,UAAT,IAAuBL,IAAIlB,IAA3B,EAAiC;AACtC,oBAAIwB,SAASN,IAAIlB,IAAJ,CAASuB,UAAT,EAAqB5B,GAArB,CAAyB,UAAC8B,KAAD;AAAA,yBAAW,CAACA,MAAM,CAAN,CAAD,EAAWA,MAAM,CAAN,IAAW,OAAKvD,MAA3B,CAAX;AAAA,iBAAzB,CAAb;;AAEA8B,qBAAKU,IAAL,CAAU;AACRlC,0BAAQ+C,UADA;AAERG,8BAAYF;AAFJ,iBAAV;AAID;AACF,aAdD;;AAgBA,mBAAO,EAACxB,MAAMA,IAAP,EAAP;AACD;;;6CAEkBkB,G,EAAK;AACtB,gBAAIS,QAAQ;AACVR,uBAASD,IAAIC,OAAJ,CAAYxB,GAAZ,CAAgB,eAAO;AAC9B,uBAAO,EAAEiC,MAAMC,GAAR,EAAP;AACD,eAFQ,CADC;AAIVC,oBAAMZ,IAAIa,OAAJ,IAAeb,IAAIc,KAAnB,IAA4Bd,IAAIe,MAAhC,IAA0Cf,IAAIgB,KAA9C,IAAuDhB,IAAIiB,MAA3D,IAAqEjB,IAAIkB,MAJrE;AAKVtE,oBAAM;AALI,aAAZ;;AAQA,mBAAO6D,KAAP;AACD;;;2CAEgB;AAAA;;AACf,mBAAO,KAAK/D,UAAL,CAAgB+C,iBAAhB,CAAkC;AACvC5C,mBAAK,KAAKA,GAD6B;AAEvC6C,sBAAQ,MAF+B;AAGvCZ,oBAAM,EAAClB,OAAO,qBAAR,EAHiC;AAIvCT,uBAAS,KAAKA;AAJyB,aAAlC,EAKJyC,IALI,CAKC,oBAAY;;AAElB,kBAAIuB,SAASC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,oBAAIC,KAAKF,SAASrC,IAAT,CAAcA,IAAd,CAAmB,CAAnB,EAAsBwC,KAA/B;AACA,oBAAID,OAAO,OAAKvE,aAAhB,EAA+B;AAC7B,yBAAO,EAAEsE,QAAQ,QAAV,EAAoBG,wCAAsCF,EAAtC,qBAApB,EAAgFG,OAAO,QAAvF,EAAP;AACD;AACD,uBAAO,EAAEJ,QAAQ,SAAV,EAAqBG,SAAS,wBAA9B,EAAwDC,OAAO,SAA/D,EAAP;AACD;AACF,aAdM,CAAP;AAeD;;;0CAEe7C,O,EAAS;AACvB,gBAAIrB,SAAS,OAAQqB,OAAR,KAAqB,QAArB,GAAgCA,OAAhC,GAA0CA,QAAQrB,MAA/D;AACA,gBAAIM,QAAQ,EAAEA,yBAAuBN,MAAvB,gBAAF,EAAZ;;AAEA,mBAAO,KAAKZ,UAAL,CAAgB+C,iBAAhB,CAAkC;AACvC5C,mBAAK,KAAKA,GAD6B;AAEvCiC,oBAAMlB,KAFiC;AAGvC8B,sBAAQ,MAH+B;AAIvCvC,uBAAS,KAAKA;AAJyB,aAAlC,EAKJyC,IALI,CAKC,KAAK6B,aALN,CAAP;AAMD;;;wCAEaC,M,EAAQ;AACpB,mBAAOA,OAAO5C,IAAP,CAAYiC,MAAZ,CAAmBtC,GAAnB,CAAuB,eAAO;AAAE,qBAAO,EAACiC,MAAMiB,IAAI,CAAJ,CAAP,EAAeL,OAAOK,IAAI,CAAJ,CAAtB,EAAP;AAAsC,aAAtE,CAAP;AACD","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport {wrapTarget, buildQuery} from \"./tools.js\";\n\n\nexport class SiriDBDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.timePrecision = (instanceSettings.jsonData && instanceSettings.jsonData.timePrecision) ?\n      instanceSettings.jsonData.timePrecision : 'ms';\n    this.factor =\n        this.timePrecision === 's' ? 1000.0 :\n        this.timePrecision === 'ms' ? 1.0 :\n        this.timePrecision === 'us' ? 0.001 :\n        this.timePrecision === 'ns' ? 0.000001 :\n        -1  // error\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  buildSiriDBQuery(target, start, end, maxDataPoints) {\n\n    let rawQuery = (target.raw === null) ? buildQuery(target) : target.raw;\n    let query = rawQuery\n      .replace(/__START__/g, start)\n      .replace(/__END__/g, end)\n      .replace(/__MAX_DATA_POINTS__/g, maxDataPoints);\n    return query;\n  }\n\n  buildTargets(targets) {\n    targets = targets.filter(t => !t.hide && t.hasOwnProperty('raw') && (t.query !== 'select' || t.raw !== null || t.target));\n\n    if (targets.length > 1) {\n      let pivot = targets[0];\n      let tmp = targets.filter(t => t.aggr === pivot.aggr &&\n                                    t.group === pivot.group &&\n                                    t.diff === pivot.diff &&\n                                    t.diffps === pivot.diffps &&\n                                    t.raw === null &&\n                                    t.query === 'select');\n\n      if (tmp.length === targets.length) {\n        targets = [{\n          query: pivot.query,\n          aggr: pivot.aggr,\n          group: pivot.group,\n          diff: pivot.diff,\n          diffps: pivot.diffps,\n          raw: pivot.raw,\n          target: targets.map(t => wrapTarget(t.target)).join(',')\n        }];\n      }\n    }\n\n    return targets;\n  }\n\n  query(options) {\n    let targets = this.buildTargets(options.targets);\n\n    if (!targets.length) {\n      return this.q.when({data: []});\n    }\n\n    let start = parseInt(options.range.from.valueOf() / 1000) + 's';\n    let end = parseInt(options.range.to.valueOf() / 1000) + 's';\n    let promises = [];\n\n    targets.forEach(t => {\n      var query = this.buildSiriDBQuery(t, start, end, options.maxDataPoints);\n      query = this.templateSrv.replace(query, options.scopedVars, 'regex');\n\n      promises.push(this.backendSrv.datasourceRequest({\n        url: this.url,\n        data: {query: query},\n        method: 'POST',\n        headers: this.headers\n      }));\n    })\n\n    return this.q.all(promises).then(this.processQueryResult.bind(this));\n  }\n\n  processQueryResult(responses) {\n    var data = [];\n\n    responses.forEach(res => {\n      if (res.data &&\n          res.data.columns !== undefined &&\n          res.data.columns.length &&\n          _.isString(res.data.columns[0])) {\n          data.push(this.processTableResult(res.data));\n      } else for (let seriesName in res.data) {\n        let points = res.data[seriesName].map((point) => [point[1], point[0] * this.factor]);\n\n        data.push({\n          target: seriesName,\n          datapoints: points\n        });\n      }\n    });\n\n    return {data: data};\n  }\n\n  processTableResult(res) {\n    let table = {\n      columns: res.columns.map(col => {\n        return { text: col };\n      }),\n      rows: res.servers || res.pools || res.series || res.users || res.groups || res.shards,\n      type: 'table'\n    };\n\n    return table;\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url,\n      method: 'POST',\n      data: {query: 'show time_precision'},\n      headers: this.headers\n    }).then(response => {\n\n      if (response.status === 200) {\n        let tp = response.data.data[0].value;\n        if (tp !== this.timePrecision) {\n          return { status: \"failed\", message: `Database seems to have a '${tp}' time precision`, title: \"Failed\" };\n        }\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  metricFindQuery(options) {\n    var target = typeof (options) === \"string\" ? options : options.target;\n    var query = { query: `list series /${target}.*/ limit 1` }\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url,\n      data: query,\n      method: 'POST',\n      headers: this.headers\n    }).then(this.extractSeries);\n  }\n\n  extractSeries(result) {\n    return result.data.series.map(arr => { return {text: arr[0], value: arr[0]};});\n  }\n}\n"]}